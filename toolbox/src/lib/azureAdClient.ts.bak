import { PublicClientApplication, Configuration, AccountInfo, AuthenticationResult, SilentRequest, PopupRequest } from '@azure/msal-browser';

// Azure AD Configuration for Tangram Interiors internal users
const msalConfig: Configuration = {
  auth: {
    clientId: '72129170-78ba-47b7-8989-fe826a45a7d4', // Frontend app ID
    authority: 'https://login.microsoftonline.com/ef032c9f-5bea-4839-b1c7-7fc37efef46a', // Tangram tenant
    redirectUri: window.location.origin
  },
  cache: {
    cacheLocation: 'sessionStorage',
    storeAuthStateInCookie: false
  }
};

class AzureAdAuthService {
  private msalInstance: PublicClientApplication;
  private initialized = false;

  constructor() {
    this.msalInstance = new PublicClientApplication(msalConfig);
  }

  async initialize(): Promise<void> {
    if (this.initialized) return;
    
    try {
      await this.msalInstance.initialize();
      this.initialized = true;
      console.log('üîê Azure AD MSAL initialized');
    } catch (error) {
      console.error('‚ùå Failed to initialize MSAL:', error);
      throw error;
    }
  }

  async loginPopup(): Promise<AuthenticationResult> {
    await this.initialize();
    
    const loginRequest: PopupRequest = {
      scopes: ['user.read'], // Only request basic Microsoft Graph access
      prompt: 'select_account'
    };

    try {
      const response = await this.msalInstance.loginPopup(loginRequest);
      console.log('‚úÖ Azure AD login successful:', response.account?.name);
      return response;
    } catch (error) {
      console.error('‚ùå Azure AD login failed:', error);
      throw error;
    }
  }

  async loginRedirect(): Promise<void> {
    await this.initialize();
    
    const loginRequest = {
      scopes: ['user.read'], // Only request basic Microsoft Graph access
      prompt: 'select_account'
    };

    try {
      await this.msalInstance.loginRedirect(loginRequest);
    } catch (error) {
      console.error('‚ùå Azure AD redirect login failed:', error);
      throw error;
    }
  }

  async logout(): Promise<void> {
    await this.initialize();
    
    try {
      await this.msalInstance.logoutPopup();
      console.log('‚úÖ Azure AD logout successful');
    } catch (error) {
      console.error('‚ùå Azure AD logout failed:', error);
      throw error;
    }
  }

  async getAccessToken(forceRefresh = false): Promise<string | null> {
    await this.initialize();
    
    const accounts = this.msalInstance.getAllAccounts();
    if (accounts.length === 0) {
      console.log('No Azure AD accounts found');
      return null;
    }

    const tokenRequest: SilentRequest = {
      scopes: ['user.read'], // Only request basic Microsoft Graph access
      account: accounts[0],
      forceRefresh
    };

    try {
      const response = await this.msalInstance.acquireTokenSilent(tokenRequest);
      return response.accessToken;
    } catch (error) {
      console.error('‚ùå Silent token acquisition failed:', error);
      
      // If silent token acquisition fails, try interactive login
      try {
        const response = await this.msalInstance.acquireTokenPopup({
          scopes: ['user.read'], // Only request basic Microsoft Graph access
          account: accounts[0]
        });
        return response.accessToken;
      } catch (interactiveError) {
        console.error('‚ùå Interactive token acquisition failed:', interactiveError);
        return null;
      }
    }
  }

  getCurrentUser(): AccountInfo | null {
    if (!this.initialized) return null;
    
    const accounts = this.msalInstance.getAllAccounts();
    return accounts.length > 0 ? accounts[0] : null;
  }

  isLoggedIn(): boolean {
    if (!this.initialized) return false;
    return this.msalInstance.getAllAccounts().length > 0;
  }

  getUserInfo() {
    const account = this.getCurrentUser();
    if (!account) return null;

    return {
      id: account.localAccountId,
      email: account.username,
      name: account.name || account.username,
      tenantId: account.tenantId,
      isEmployee: account.username?.endsWith('@tangramint.onmicrosoft.com') || 
                  account.username?.endsWith('@tangraminteriors.com') || false
    };
  }

  async handleRedirectResponse(): Promise<AuthenticationResult | null> {
    await this.initialize();
    
    try {
      const response = await this.msalInstance.handleRedirectPromise();
      if (response) {
        console.log('‚úÖ Azure AD redirect response handled:', response.account?.name);
      }
      return response;
    } catch (error) {
      console.error('‚ùå Error handling redirect response:', error);
      throw error;
    }
  }
}

// Export singleton instance
export const azureAdAuth = new AzureAdAuthService();
export default azureAdAuth; 